// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { KillMailLossType } from "../common.sol";

struct KillMailTableData {
  address killer;
  address victim;
  KillMailLossType lossType;
  uint256 solarSystemId;
  uint256 killTimestamp;
}

library KillMailTable {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "eveworld", name: "KillMailTable", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462657665776f726c640000000000004b696c6c4d61696c5461626c65000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0069050014140120200000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint256)
  Schema constant _keySchema = Schema.wrap(0x002001001f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (address, address, uint8, uint256, uint256)
  Schema constant _valueSchema = Schema.wrap(0x006905006161001f1f0000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "killMailId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](5);
    fieldNames[0] = "killer";
    fieldNames[1] = "victim";
    fieldNames[2] = "lossType";
    fieldNames[3] = "solarSystemId";
    fieldNames[4] = "killTimestamp";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get killer.
   */
  function getKiller(uint256 killMailId) internal view returns (address killer) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get killer.
   */
  function _getKiller(uint256 killMailId) internal view returns (address killer) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set killer.
   */
  function setKiller(uint256 killMailId, address killer) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((killer)), _fieldLayout);
  }

  /**
   * @notice Set killer.
   */
  function _setKiller(uint256 killMailId, address killer) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((killer)), _fieldLayout);
  }

  /**
   * @notice Get victim.
   */
  function getVictim(uint256 killMailId) internal view returns (address victim) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get victim.
   */
  function _getVictim(uint256 killMailId) internal view returns (address victim) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set victim.
   */
  function setVictim(uint256 killMailId, address victim) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((victim)), _fieldLayout);
  }

  /**
   * @notice Set victim.
   */
  function _setVictim(uint256 killMailId, address victim) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((victim)), _fieldLayout);
  }

  /**
   * @notice Get lossType.
   */
  function getLossType(uint256 killMailId) internal view returns (KillMailLossType lossType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return KillMailLossType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get lossType.
   */
  function _getLossType(uint256 killMailId) internal view returns (KillMailLossType lossType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return KillMailLossType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Set lossType.
   */
  function setLossType(uint256 killMailId, KillMailLossType lossType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked(uint8(lossType)), _fieldLayout);
  }

  /**
   * @notice Set lossType.
   */
  function _setLossType(uint256 killMailId, KillMailLossType lossType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked(uint8(lossType)), _fieldLayout);
  }

  /**
   * @notice Get solarSystemId.
   */
  function getSolarSystemId(uint256 killMailId) internal view returns (uint256 solarSystemId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get solarSystemId.
   */
  function _getSolarSystemId(uint256 killMailId) internal view returns (uint256 solarSystemId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set solarSystemId.
   */
  function setSolarSystemId(uint256 killMailId, uint256 solarSystemId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((solarSystemId)), _fieldLayout);
  }

  /**
   * @notice Set solarSystemId.
   */
  function _setSolarSystemId(uint256 killMailId, uint256 solarSystemId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((solarSystemId)), _fieldLayout);
  }

  /**
   * @notice Get killTimestamp.
   */
  function getKillTimestamp(uint256 killMailId) internal view returns (uint256 killTimestamp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get killTimestamp.
   */
  function _getKillTimestamp(uint256 killMailId) internal view returns (uint256 killTimestamp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set killTimestamp.
   */
  function setKillTimestamp(uint256 killMailId, uint256 killTimestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((killTimestamp)), _fieldLayout);
  }

  /**
   * @notice Set killTimestamp.
   */
  function _setKillTimestamp(uint256 killMailId, uint256 killTimestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((killTimestamp)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(uint256 killMailId) internal view returns (KillMailTableData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint256 killMailId) internal view returns (KillMailTableData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint256 killMailId,
    address killer,
    address victim,
    KillMailLossType lossType,
    uint256 solarSystemId,
    uint256 killTimestamp
  ) internal {
    bytes memory _staticData = encodeStatic(killer, victim, lossType, solarSystemId, killTimestamp);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint256 killMailId,
    address killer,
    address victim,
    KillMailLossType lossType,
    uint256 solarSystemId,
    uint256 killTimestamp
  ) internal {
    bytes memory _staticData = encodeStatic(killer, victim, lossType, solarSystemId, killTimestamp);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint256 killMailId, KillMailTableData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.killer,
      _table.victim,
      _table.lossType,
      _table.solarSystemId,
      _table.killTimestamp
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint256 killMailId, KillMailTableData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.killer,
      _table.victim,
      _table.lossType,
      _table.solarSystemId,
      _table.killTimestamp
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (address killer, address victim, KillMailLossType lossType, uint256 solarSystemId, uint256 killTimestamp)
  {
    killer = (address(Bytes.getBytes20(_blob, 0)));

    victim = (address(Bytes.getBytes20(_blob, 20)));

    lossType = KillMailLossType(uint8(Bytes.getBytes1(_blob, 40)));

    solarSystemId = (uint256(Bytes.getBytes32(_blob, 41)));

    killTimestamp = (uint256(Bytes.getBytes32(_blob, 73)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (KillMailTableData memory _table) {
    (_table.killer, _table.victim, _table.lossType, _table.solarSystemId, _table.killTimestamp) = decodeStatic(
      _staticData
    );
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint256 killMailId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint256 killMailId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    address killer,
    address victim,
    KillMailLossType lossType,
    uint256 solarSystemId,
    uint256 killTimestamp
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(killer, victim, lossType, solarSystemId, killTimestamp);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    address killer,
    address victim,
    KillMailLossType lossType,
    uint256 solarSystemId,
    uint256 killTimestamp
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(killer, victim, lossType, solarSystemId, killTimestamp);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint256 killMailId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    return _keyTuple;
  }
}
