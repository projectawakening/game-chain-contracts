// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { KillMailLossType } from "./../common.sol";

FieldLayout constant _fieldLayout = FieldLayout.wrap(
  0x0081050020200120200000000000000000000000000000000000000000000000
);

struct KillMailTableData {
  uint256 killerCharacterId;
  uint256 victimCharacterId;
  KillMailLossType lossType;
  uint256 solarSystemId;
  uint256 killTimestamp;
}

library KillMailTable {
  /**
   * @notice Get the table values' field layout.
   * @return _fieldLayout The field layout for the table.
   */
  function getFieldLayout() internal pure returns (FieldLayout) {
    return _fieldLayout;
  }

  /**
   * @notice Get the table's key schema.
   * @return _keySchema The key schema for the table.
   */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _keySchema = new SchemaType[](1);
    _keySchema[0] = SchemaType.UINT256;

    return SchemaLib.encode(_keySchema);
  }

  /**
   * @notice Get the table's value schema.
   * @return _valueSchema The value schema for the table.
   */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _valueSchema = new SchemaType[](5);
    _valueSchema[0] = SchemaType.UINT256;
    _valueSchema[1] = SchemaType.UINT256;
    _valueSchema[2] = SchemaType.UINT8;
    _valueSchema[3] = SchemaType.UINT256;
    _valueSchema[4] = SchemaType.UINT256;

    return SchemaLib.encode(_valueSchema);
  }

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "killMailId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](5);
    fieldNames[0] = "killerCharacterId";
    fieldNames[1] = "victimCharacterId";
    fieldNames[2] = "lossType";
    fieldNames[3] = "solarSystemId";
    fieldNames[4] = "killTimestamp";
  }

  /**
   * @notice Register the table with its config.
   */
  function register(ResourceId _tableId) internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register(ResourceId _tableId) internal {
    StoreCore.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get killerCharacterId.
   */
  function getKillerCharacterId(
    ResourceId _tableId,
    uint256 killMailId
  ) internal view returns (uint256 killerCharacterId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get killerCharacterId.
   */
  function _getKillerCharacterId(
    ResourceId _tableId,
    uint256 killMailId
  ) internal view returns (uint256 killerCharacterId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set killerCharacterId.
   */
  function setKillerCharacterId(ResourceId _tableId, uint256 killMailId, uint256 killerCharacterId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((killerCharacterId)), _fieldLayout);
  }

  /**
   * @notice Set killerCharacterId.
   */
  function _setKillerCharacterId(ResourceId _tableId, uint256 killMailId, uint256 killerCharacterId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((killerCharacterId)), _fieldLayout);
  }

  /**
   * @notice Get victimCharacterId.
   */
  function getVictimCharacterId(
    ResourceId _tableId,
    uint256 killMailId
  ) internal view returns (uint256 victimCharacterId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get victimCharacterId.
   */
  function _getVictimCharacterId(
    ResourceId _tableId,
    uint256 killMailId
  ) internal view returns (uint256 victimCharacterId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set victimCharacterId.
   */
  function setVictimCharacterId(ResourceId _tableId, uint256 killMailId, uint256 victimCharacterId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((victimCharacterId)), _fieldLayout);
  }

  /**
   * @notice Set victimCharacterId.
   */
  function _setVictimCharacterId(ResourceId _tableId, uint256 killMailId, uint256 victimCharacterId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((victimCharacterId)), _fieldLayout);
  }

  /**
   * @notice Get lossType.
   */
  function getLossType(ResourceId _tableId, uint256 killMailId) internal view returns (KillMailLossType lossType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return KillMailLossType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get lossType.
   */
  function _getLossType(ResourceId _tableId, uint256 killMailId) internal view returns (KillMailLossType lossType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return KillMailLossType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Set lossType.
   */
  function setLossType(ResourceId _tableId, uint256 killMailId, KillMailLossType lossType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked(uint8(lossType)), _fieldLayout);
  }

  /**
   * @notice Set lossType.
   */
  function _setLossType(ResourceId _tableId, uint256 killMailId, KillMailLossType lossType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked(uint8(lossType)), _fieldLayout);
  }

  /**
   * @notice Get solarSystemId.
   */
  function getSolarSystemId(ResourceId _tableId, uint256 killMailId) internal view returns (uint256 solarSystemId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get solarSystemId.
   */
  function _getSolarSystemId(ResourceId _tableId, uint256 killMailId) internal view returns (uint256 solarSystemId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set solarSystemId.
   */
  function setSolarSystemId(ResourceId _tableId, uint256 killMailId, uint256 solarSystemId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((solarSystemId)), _fieldLayout);
  }

  /**
   * @notice Set solarSystemId.
   */
  function _setSolarSystemId(ResourceId _tableId, uint256 killMailId, uint256 solarSystemId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((solarSystemId)), _fieldLayout);
  }

  /**
   * @notice Get killTimestamp.
   */
  function getKillTimestamp(ResourceId _tableId, uint256 killMailId) internal view returns (uint256 killTimestamp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get killTimestamp.
   */
  function _getKillTimestamp(ResourceId _tableId, uint256 killMailId) internal view returns (uint256 killTimestamp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set killTimestamp.
   */
  function setKillTimestamp(ResourceId _tableId, uint256 killMailId, uint256 killTimestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((killTimestamp)), _fieldLayout);
  }

  /**
   * @notice Set killTimestamp.
   */
  function _setKillTimestamp(ResourceId _tableId, uint256 killMailId, uint256 killTimestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((killTimestamp)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(ResourceId _tableId, uint256 killMailId) internal view returns (KillMailTableData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(ResourceId _tableId, uint256 killMailId) internal view returns (KillMailTableData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    ResourceId _tableId,
    uint256 killMailId,
    uint256 killerCharacterId,
    uint256 victimCharacterId,
    KillMailLossType lossType,
    uint256 solarSystemId,
    uint256 killTimestamp
  ) internal {
    bytes memory _staticData = encodeStatic(
      killerCharacterId,
      victimCharacterId,
      lossType,
      solarSystemId,
      killTimestamp
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    ResourceId _tableId,
    uint256 killMailId,
    uint256 killerCharacterId,
    uint256 victimCharacterId,
    KillMailLossType lossType,
    uint256 solarSystemId,
    uint256 killTimestamp
  ) internal {
    bytes memory _staticData = encodeStatic(
      killerCharacterId,
      victimCharacterId,
      lossType,
      solarSystemId,
      killTimestamp
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(ResourceId _tableId, uint256 killMailId, KillMailTableData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.killerCharacterId,
      _table.victimCharacterId,
      _table.lossType,
      _table.solarSystemId,
      _table.killTimestamp
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(ResourceId _tableId, uint256 killMailId, KillMailTableData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.killerCharacterId,
      _table.victimCharacterId,
      _table.lossType,
      _table.solarSystemId,
      _table.killTimestamp
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint256 killerCharacterId,
      uint256 victimCharacterId,
      KillMailLossType lossType,
      uint256 solarSystemId,
      uint256 killTimestamp
    )
  {
    killerCharacterId = (uint256(Bytes.slice32(_blob, 0)));

    victimCharacterId = (uint256(Bytes.slice32(_blob, 32)));

    lossType = KillMailLossType(uint8(Bytes.slice1(_blob, 64)));

    solarSystemId = (uint256(Bytes.slice32(_blob, 65)));

    killTimestamp = (uint256(Bytes.slice32(_blob, 97)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    PackedCounter,
    bytes memory
  ) internal pure returns (KillMailTableData memory _table) {
    (
      _table.killerCharacterId,
      _table.victimCharacterId,
      _table.lossType,
      _table.solarSystemId,
      _table.killTimestamp
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(ResourceId _tableId, uint256 killMailId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(ResourceId _tableId, uint256 killMailId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 killerCharacterId,
    uint256 victimCharacterId,
    KillMailLossType lossType,
    uint256 solarSystemId,
    uint256 killTimestamp
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(killerCharacterId, victimCharacterId, lossType, solarSystemId, killTimestamp);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 killerCharacterId,
    uint256 victimCharacterId,
    KillMailLossType lossType,
    uint256 solarSystemId,
    uint256 killTimestamp
  ) internal pure returns (bytes memory, PackedCounter, bytes memory) {
    bytes memory _staticData = encodeStatic(
      killerCharacterId,
      victimCharacterId,
      lossType,
      solarSystemId,
      killTimestamp
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint256 killMailId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(killMailId));

    return _keyTuple;
  }
}
