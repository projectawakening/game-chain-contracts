// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { RiftSystem } from "../../systems/rift/RiftSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type RiftSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "evefrontier", name: "RiftSystem" }))
RiftSystemType constant riftSystem = RiftSystemType.wrap(
  0x737965766566726f6e746965720000005269667453797374656d000000000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title RiftSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library RiftSystemLib {
  error RiftSystemLib_CallingFromRootSystem();
  error RiftAlreadyExists();
  error RiftAlreadyCollapsed();

  function createRift(RiftSystemType self, uint256 riftId, uint256 crudeAmount) internal {
    return CallWrapper(self.toResourceId(), address(0)).createRift(riftId, crudeAmount);
  }

  function destroyRift(RiftSystemType self, uint256 riftId) internal {
    return CallWrapper(self.toResourceId(), address(0)).destroyRift(riftId);
  }

  function getRiftClassId(RiftSystemType self) internal view returns (uint256) {
    return CallWrapper(self.toResourceId(), address(0)).getRiftClassId();
  }

  function createRift(CallWrapper memory self, uint256 riftId, uint256 crudeAmount) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert RiftSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_createRift_uint256_uint256.createRift, (riftId, crudeAmount));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function destroyRift(CallWrapper memory self, uint256 riftId) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert RiftSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_destroyRift_uint256.destroyRift, (riftId));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function getRiftClassId(CallWrapper memory self) internal view returns (uint256) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert RiftSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_getRiftClassId.getRiftClassId, ());
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (uint256));
  }

  function createRift(RootCallWrapper memory self, uint256 riftId, uint256 crudeAmount) internal {
    bytes memory systemCall = abi.encodeCall(_createRift_uint256_uint256.createRift, (riftId, crudeAmount));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function destroyRift(RootCallWrapper memory self, uint256 riftId) internal {
    bytes memory systemCall = abi.encodeCall(_destroyRift_uint256.destroyRift, (riftId));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function getRiftClassId(RootCallWrapper memory self) internal view returns (uint256) {
    bytes memory systemCall = abi.encodeCall(_getRiftClassId.getRiftClassId, ());

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    return abi.decode(result, (uint256));
  }

  function callFrom(RiftSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(RiftSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), msg.sender);
  }

  function callAsRootFrom(RiftSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(RiftSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(RiftSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (RiftSystemType) {
    return RiftSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(RiftSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _createRift_uint256_uint256 {
  function createRift(uint256 riftId, uint256 crudeAmount) external;
}

interface _destroyRift_uint256 {
  function destroyRift(uint256 riftId) external;
}

interface _getRiftClassId {
  function getRiftClassId() external;
}

using RiftSystemLib for RiftSystemType global;
using RiftSystemLib for CallWrapper global;
using RiftSystemLib for RootCallWrapper global;
