// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { FuelSystem } from "../../systems/fuel/FuelSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type FuelSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "evefrontier", name: "FuelSystem" }))
FuelSystemType constant fuelSystem = FuelSystemType.wrap(
  0x737965766566726f6e746965720000004675656c53797374656d000000000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title FuelSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library FuelSystemLib {
  error FuelSystemLib_CallingFromRootSystem();
  error Fuel_NoFuel(uint256 smartObjectId);
  error Fuel_ExceedsMaxCapacity(uint256 smartObjectId, uint256 maxCapacity, uint256 fuelAmount);
  error Fuel_InvalidFuelConsumptionInterval(uint256 smartObjectId);

  function configureFuelParameters(
    FuelSystemType self,
    uint256 smartObjectId,
    uint256 fuelUnitVolume,
    uint256 fuelConsumptionIntervalInSeconds,
    uint256 fuelMaxCapacity,
    uint256 fuelAmount
  ) internal {
    return
      CallWrapper(self.toResourceId(), address(0)).configureFuelParameters(
        smartObjectId,
        fuelUnitVolume,
        fuelConsumptionIntervalInSeconds,
        fuelMaxCapacity,
        fuelAmount
      );
  }

  function setFuelUnitVolume(FuelSystemType self, uint256 smartObjectId, uint256 fuelUnitVolume) internal {
    return CallWrapper(self.toResourceId(), address(0)).setFuelUnitVolume(smartObjectId, fuelUnitVolume);
  }

  function setFuelConsumptionIntervalInSeconds(
    FuelSystemType self,
    uint256 smartObjectId,
    uint256 fuelConsumptionIntervalInSeconds
  ) internal {
    return
      CallWrapper(self.toResourceId(), address(0)).setFuelConsumptionIntervalInSeconds(
        smartObjectId,
        fuelConsumptionIntervalInSeconds
      );
  }

  function setFuelMaxCapacity(FuelSystemType self, uint256 smartObjectId, uint256 fuelMaxCapacity) internal {
    return CallWrapper(self.toResourceId(), address(0)).setFuelMaxCapacity(smartObjectId, fuelMaxCapacity);
  }

  function setFuelAmount(FuelSystemType self, uint256 smartObjectId, uint256 fuelAmountInWei) internal {
    return CallWrapper(self.toResourceId(), address(0)).setFuelAmount(smartObjectId, fuelAmountInWei);
  }

  function depositFuel(FuelSystemType self, uint256 smartObjectId, uint256 fuelAmount) internal {
    return CallWrapper(self.toResourceId(), address(0)).depositFuel(smartObjectId, fuelAmount);
  }

  function withdrawFuel(FuelSystemType self, uint256 smartObjectId, uint256 fuelAmount) internal {
    return CallWrapper(self.toResourceId(), address(0)).withdrawFuel(smartObjectId, fuelAmount);
  }

  function updateFuel(FuelSystemType self, uint256 smartObjectId) internal {
    return CallWrapper(self.toResourceId(), address(0)).updateFuel(smartObjectId);
  }

  function currentFuelAmountInWei(FuelSystemType self, uint256 smartObjectId) internal view returns (uint256 amount) {
    return CallWrapper(self.toResourceId(), address(0)).currentFuelAmountInWei(smartObjectId);
  }

  function configureFuelParameters(
    CallWrapper memory self,
    uint256 smartObjectId,
    uint256 fuelUnitVolume,
    uint256 fuelConsumptionIntervalInSeconds,
    uint256 fuelMaxCapacity,
    uint256 fuelAmount
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert FuelSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeWithSelector(
      bytes4(keccak256("FuelSystem.configureFuelParameters")),
      smartObjectId,
      fuelUnitVolume,
      fuelConsumptionIntervalInSeconds,
      fuelMaxCapacity,
      fuelAmount
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function setFuelUnitVolume(CallWrapper memory self, uint256 smartObjectId, uint256 fuelUnitVolume) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert FuelSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeWithSelector(
      bytes4(keccak256("FuelSystem.setFuelUnitVolume")),
      smartObjectId,
      fuelUnitVolume
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function setFuelConsumptionIntervalInSeconds(
    CallWrapper memory self,
    uint256 smartObjectId,
    uint256 fuelConsumptionIntervalInSeconds
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert FuelSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeWithSelector(
      bytes4(keccak256("FuelSystem.setFuelConsumptionIntervalInSeconds")),
      smartObjectId,
      fuelConsumptionIntervalInSeconds
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function setFuelMaxCapacity(CallWrapper memory self, uint256 smartObjectId, uint256 fuelMaxCapacity) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert FuelSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeWithSelector(
      bytes4(keccak256("FuelSystem.setFuelMaxCapacity")),
      smartObjectId,
      fuelMaxCapacity
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function setFuelAmount(CallWrapper memory self, uint256 smartObjectId, uint256 fuelAmountInWei) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert FuelSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeWithSelector(
      bytes4(keccak256("FuelSystem.setFuelAmount")),
      smartObjectId,
      fuelAmountInWei
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function depositFuel(CallWrapper memory self, uint256 smartObjectId, uint256 fuelAmount) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert FuelSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeWithSelector(
      bytes4(keccak256("FuelSystem.depositFuel")),
      smartObjectId,
      fuelAmount
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function withdrawFuel(CallWrapper memory self, uint256 smartObjectId, uint256 fuelAmount) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert FuelSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeWithSelector(
      bytes4(keccak256("FuelSystem.withdrawFuel")),
      smartObjectId,
      fuelAmount
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function updateFuel(CallWrapper memory self, uint256 smartObjectId) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert FuelSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeWithSelector(bytes4(keccak256("FuelSystem.updateFuel")), smartObjectId);
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function currentFuelAmountInWei(
    CallWrapper memory self,
    uint256 smartObjectId
  ) internal view returns (uint256 amount) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert FuelSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeWithSelector(
      bytes4(keccak256("FuelSystem.currentFuelAmountInWei")),
      smartObjectId
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (uint256));
  }

  function configureFuelParameters(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    uint256 fuelUnitVolume,
    uint256 fuelConsumptionIntervalInSeconds,
    uint256 fuelMaxCapacity,
    uint256 fuelAmount
  ) internal {
    bytes memory systemCall = abi.encodeWithSelector(
      bytes4(keccak256("FuelSystem.configureFuelParameters")),
      smartObjectId,
      fuelUnitVolume,
      fuelConsumptionIntervalInSeconds,
      fuelMaxCapacity,
      fuelAmount
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function setFuelUnitVolume(RootCallWrapper memory self, uint256 smartObjectId, uint256 fuelUnitVolume) internal {
    bytes memory systemCall = abi.encodeWithSelector(
      bytes4(keccak256("FuelSystem.setFuelUnitVolume")),
      smartObjectId,
      fuelUnitVolume
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function setFuelConsumptionIntervalInSeconds(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    uint256 fuelConsumptionIntervalInSeconds
  ) internal {
    bytes memory systemCall = abi.encodeWithSelector(
      bytes4(keccak256("FuelSystem.setFuelConsumptionIntervalInSeconds")),
      smartObjectId,
      fuelConsumptionIntervalInSeconds
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function setFuelMaxCapacity(RootCallWrapper memory self, uint256 smartObjectId, uint256 fuelMaxCapacity) internal {
    bytes memory systemCall = abi.encodeWithSelector(
      bytes4(keccak256("FuelSystem.setFuelMaxCapacity")),
      smartObjectId,
      fuelMaxCapacity
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function setFuelAmount(RootCallWrapper memory self, uint256 smartObjectId, uint256 fuelAmountInWei) internal {
    bytes memory systemCall = abi.encodeWithSelector(
      bytes4(keccak256("FuelSystem.setFuelAmount")),
      smartObjectId,
      fuelAmountInWei
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function depositFuel(RootCallWrapper memory self, uint256 smartObjectId, uint256 fuelAmount) internal {
    bytes memory systemCall = abi.encodeWithSelector(
      bytes4(keccak256("FuelSystem.depositFuel")),
      smartObjectId,
      fuelAmount
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function withdrawFuel(RootCallWrapper memory self, uint256 smartObjectId, uint256 fuelAmount) internal {
    bytes memory systemCall = abi.encodeWithSelector(
      bytes4(keccak256("FuelSystem.withdrawFuel")),
      smartObjectId,
      fuelAmount
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function updateFuel(RootCallWrapper memory self, uint256 smartObjectId) internal {
    bytes memory systemCall = abi.encodeWithSelector(bytes4(keccak256("FuelSystem.updateFuel")), smartObjectId);
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function currentFuelAmountInWei(
    RootCallWrapper memory self,
    uint256 smartObjectId
  ) internal view returns (uint256 amount) {
    bytes memory systemCall = abi.encodeWithSelector(
      bytes4(keccak256("FuelSystem.currentFuelAmountInWei")),
      smartObjectId
    );

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    return abi.decode(result, (uint256));
  }

  function callFrom(FuelSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(FuelSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), msg.sender);
  }

  function callAsRootFrom(FuelSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(FuelSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(FuelSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (FuelSystemType) {
    return FuelSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(FuelSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

using FuelSystemLib for FuelSystemType global;
using FuelSystemLib for CallWrapper global;
using FuelSystemLib for RootCallWrapper global;
