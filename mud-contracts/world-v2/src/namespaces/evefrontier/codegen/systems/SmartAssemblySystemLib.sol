// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { SmartAssemblySystem } from "../../systems/smart-assembly/SmartAssemblySystem.sol";
import { EntityRecordData } from "../../systems/entity-record/types.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type SmartAssemblySystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "evefrontier", name: "SmartAssemblySys" }))
SmartAssemblySystemType constant smartAssemblySystem = SmartAssemblySystemType.wrap(
  0x737965766566726f6e74696572000000536d617274417373656d626c79537973
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title SmartAssemblySystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library SmartAssemblySystemLib {
  error SmartAssemblySystemLib_CallingFromRootSystem();
  error SmartAssemblyTypeAlreadyExists(uint256 smartObjectId);
  error SmartAssemblyTypeCannotBeEmpty(uint256 smartObjectId);
  error SmartAssemblyDoesNotExist(uint256 smartObjectId);

  function createSmartAssembly(
    SmartAssemblySystemType self,
    uint256 smartObjectId,
    string memory smartAssemblyType,
    EntityRecordData memory entityRecord
  ) internal {
    return
      CallWrapper(self.toResourceId(), address(0)).createSmartAssembly(smartObjectId, smartAssemblyType, entityRecord);
  }

  function setSmartAssemblyType(
    SmartAssemblySystemType self,
    uint256 smartObjectId,
    string memory smartAssemblyType
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).setSmartAssemblyType(smartObjectId, smartAssemblyType);
  }

  function updateSmartAssemblyType(
    SmartAssemblySystemType self,
    uint256 smartObjectId,
    string memory smartAssemblyType
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).updateSmartAssemblyType(smartObjectId, smartAssemblyType);
  }

  function createSmartAssembly(
    CallWrapper memory self,
    uint256 smartObjectId,
    string memory smartAssemblyType,
    EntityRecordData memory entityRecord
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert SmartAssemblySystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _createSmartAssembly_uint256_string_EntityRecordData.createSmartAssembly,
      (smartObjectId, smartAssemblyType, entityRecord)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function setSmartAssemblyType(
    CallWrapper memory self,
    uint256 smartObjectId,
    string memory smartAssemblyType
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert SmartAssemblySystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _setSmartAssemblyType_uint256_string.setSmartAssemblyType,
      (smartObjectId, smartAssemblyType)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function updateSmartAssemblyType(
    CallWrapper memory self,
    uint256 smartObjectId,
    string memory smartAssemblyType
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert SmartAssemblySystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _updateSmartAssemblyType_uint256_string.updateSmartAssemblyType,
      (smartObjectId, smartAssemblyType)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function createSmartAssembly(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    string memory smartAssemblyType,
    EntityRecordData memory entityRecord
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _createSmartAssembly_uint256_string_EntityRecordData.createSmartAssembly,
      (smartObjectId, smartAssemblyType, entityRecord)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function setSmartAssemblyType(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    string memory smartAssemblyType
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _setSmartAssemblyType_uint256_string.setSmartAssemblyType,
      (smartObjectId, smartAssemblyType)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function updateSmartAssemblyType(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    string memory smartAssemblyType
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _updateSmartAssemblyType_uint256_string.updateSmartAssemblyType,
      (smartObjectId, smartAssemblyType)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(SmartAssemblySystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(SmartAssemblySystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), msg.sender);
  }

  function callAsRootFrom(SmartAssemblySystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(SmartAssemblySystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(SmartAssemblySystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (SmartAssemblySystemType) {
    return SmartAssemblySystemType.wrap(resourceId.unwrap());
  }

  function getAddress(SmartAssemblySystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _createSmartAssembly_uint256_string_EntityRecordData {
  function createSmartAssembly(
    uint256 smartObjectId,
    string memory smartAssemblyType,
    EntityRecordData memory entityRecord
  ) external;
}

interface _setSmartAssemblyType_uint256_string {
  function setSmartAssemblyType(uint256 smartObjectId, string memory smartAssemblyType) external;
}

interface _updateSmartAssemblyType_uint256_string {
  function updateSmartAssemblyType(uint256 smartObjectId, string memory smartAssemblyType) external;
}

using SmartAssemblySystemLib for SmartAssemblySystemType global;
using SmartAssemblySystemLib for CallWrapper global;
using SmartAssemblySystemLib for RootCallWrapper global;
