// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { CrudeLiftSystem } from "../../systems/crude-lift/CrudeLiftSystem.sol";
import { State, CreateAndAnchorDeployableParams } from "../../systems/deployable/types.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type CrudeLiftSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "evefrontier", name: "CrudeLiftSystem" }))
CrudeLiftSystemType constant crudeLiftSystem = CrudeLiftSystemType.wrap(
  0x737965766566726f6e7469657200000043727564654c69667453797374656d00
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title CrudeLiftSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library CrudeLiftSystemLib {
  error CrudeLiftSystemLib_CallingFromRootSystem();
  error LensNotInserted();
  error LensExhausted();
  error LensAlreadyInserted();
  error LensExpired();
  error CannotRemoveLensWhileMining();
  error AlreadyMining();
  error NotMining();
  error RiftNotFoundOrDepleted();
  error InsufficientCrude();
  error RiftCollapsed();
  error CrudeLiftWrongState(uint256 crudeLiftId, State currentState);

  function createAndAnchorCrudeLift(
    CrudeLiftSystemType self,
    CreateAndAnchorDeployableParams memory params,
    uint256 storageCapacity,
    uint256 ephemeralStorageCapacity
  ) internal {
    return
      CallWrapper(self.toResourceId(), address(0)).createAndAnchorCrudeLift(
        params,
        storageCapacity,
        ephemeralStorageCapacity
      );
  }

  function insertLens(CrudeLiftSystemType self, uint256 crudeLiftId) internal {
    return CallWrapper(self.toResourceId(), address(0)).insertLens(crudeLiftId);
  }

  function startMining(CrudeLiftSystemType self, uint256 crudeLiftId, uint256 riftId, uint256 miningRate) internal {
    return CallWrapper(self.toResourceId(), address(0)).startMining(crudeLiftId, riftId, miningRate);
  }

  function stopMining(CrudeLiftSystemType self, uint256 crudeLiftId) internal {
    return CallWrapper(self.toResourceId(), address(0)).stopMining(crudeLiftId);
  }

  function removeLens(CrudeLiftSystemType self, uint256 smartObjectId, address receiver) internal {
    return CallWrapper(self.toResourceId(), address(0)).removeLens(smartObjectId, receiver);
  }

  function addCrude(CrudeLiftSystemType self, uint256 smartObjectId, uint256 amount) internal {
    return CallWrapper(self.toResourceId(), address(0)).addCrude(smartObjectId, amount);
  }

  function removeCrude(CrudeLiftSystemType self, uint256 smartObjectId, uint256 amount) internal {
    return CallWrapper(self.toResourceId(), address(0)).removeCrude(smartObjectId, amount);
  }

  function clearCrude(CrudeLiftSystemType self, uint256 smartObjectId) internal {
    return CallWrapper(self.toResourceId(), address(0)).clearCrude(smartObjectId);
  }

  function getCrudeAmount(CrudeLiftSystemType self, uint256 smartObjectId) internal view returns (uint256) {
    return CallWrapper(self.toResourceId(), address(0)).getCrudeAmount(smartObjectId);
  }

  function getCrudeLiftClassId(CrudeLiftSystemType self) internal view returns (uint256) {
    return CallWrapper(self.toResourceId(), address(0)).getCrudeLiftClassId();
  }

  function createAndAnchorCrudeLift(
    CallWrapper memory self,
    CreateAndAnchorDeployableParams memory params,
    uint256 storageCapacity,
    uint256 ephemeralStorageCapacity
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CrudeLiftSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _createAndAnchorCrudeLift_CreateAndAnchorDeployableParams_uint256_uint256.createAndAnchorCrudeLift,
      (params, storageCapacity, ephemeralStorageCapacity)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function insertLens(CallWrapper memory self, uint256 crudeLiftId) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CrudeLiftSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_insertLens_uint256.insertLens, (crudeLiftId));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function startMining(CallWrapper memory self, uint256 crudeLiftId, uint256 riftId, uint256 miningRate) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CrudeLiftSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _startMining_uint256_uint256_uint256.startMining,
      (crudeLiftId, riftId, miningRate)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function stopMining(CallWrapper memory self, uint256 crudeLiftId) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CrudeLiftSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_stopMining_uint256.stopMining, (crudeLiftId));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function removeLens(CallWrapper memory self, uint256 smartObjectId, address receiver) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CrudeLiftSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_removeLens_uint256_address.removeLens, (smartObjectId, receiver));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function addCrude(CallWrapper memory self, uint256 smartObjectId, uint256 amount) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CrudeLiftSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_addCrude_uint256_uint256.addCrude, (smartObjectId, amount));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function removeCrude(CallWrapper memory self, uint256 smartObjectId, uint256 amount) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CrudeLiftSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_removeCrude_uint256_uint256.removeCrude, (smartObjectId, amount));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function clearCrude(CallWrapper memory self, uint256 smartObjectId) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CrudeLiftSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_clearCrude_uint256.clearCrude, (smartObjectId));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function getCrudeAmount(CallWrapper memory self, uint256 smartObjectId) internal view returns (uint256) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CrudeLiftSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_getCrudeAmount_uint256.getCrudeAmount, (smartObjectId));
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (uint256));
  }

  function getCrudeLiftClassId(CallWrapper memory self) internal view returns (uint256) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CrudeLiftSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_getCrudeLiftClassId.getCrudeLiftClassId, ());
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (uint256));
  }

  function createAndAnchorCrudeLift(
    RootCallWrapper memory self,
    CreateAndAnchorDeployableParams memory params,
    uint256 storageCapacity,
    uint256 ephemeralStorageCapacity
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _createAndAnchorCrudeLift_CreateAndAnchorDeployableParams_uint256_uint256.createAndAnchorCrudeLift,
      (params, storageCapacity, ephemeralStorageCapacity)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function insertLens(RootCallWrapper memory self, uint256 crudeLiftId) internal {
    bytes memory systemCall = abi.encodeCall(_insertLens_uint256.insertLens, (crudeLiftId));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function startMining(RootCallWrapper memory self, uint256 crudeLiftId, uint256 riftId, uint256 miningRate) internal {
    bytes memory systemCall = abi.encodeCall(
      _startMining_uint256_uint256_uint256.startMining,
      (crudeLiftId, riftId, miningRate)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function stopMining(RootCallWrapper memory self, uint256 crudeLiftId) internal {
    bytes memory systemCall = abi.encodeCall(_stopMining_uint256.stopMining, (crudeLiftId));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function removeLens(RootCallWrapper memory self, uint256 smartObjectId, address receiver) internal {
    bytes memory systemCall = abi.encodeCall(_removeLens_uint256_address.removeLens, (smartObjectId, receiver));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function addCrude(RootCallWrapper memory self, uint256 smartObjectId, uint256 amount) internal {
    bytes memory systemCall = abi.encodeCall(_addCrude_uint256_uint256.addCrude, (smartObjectId, amount));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function removeCrude(RootCallWrapper memory self, uint256 smartObjectId, uint256 amount) internal {
    bytes memory systemCall = abi.encodeCall(_removeCrude_uint256_uint256.removeCrude, (smartObjectId, amount));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function clearCrude(RootCallWrapper memory self, uint256 smartObjectId) internal {
    bytes memory systemCall = abi.encodeCall(_clearCrude_uint256.clearCrude, (smartObjectId));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function getCrudeAmount(RootCallWrapper memory self, uint256 smartObjectId) internal view returns (uint256) {
    bytes memory systemCall = abi.encodeCall(_getCrudeAmount_uint256.getCrudeAmount, (smartObjectId));

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    return abi.decode(result, (uint256));
  }

  function getCrudeLiftClassId(RootCallWrapper memory self) internal view returns (uint256) {
    bytes memory systemCall = abi.encodeCall(_getCrudeLiftClassId.getCrudeLiftClassId, ());

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    return abi.decode(result, (uint256));
  }

  function callFrom(CrudeLiftSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(CrudeLiftSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), msg.sender);
  }

  function callAsRootFrom(CrudeLiftSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(CrudeLiftSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(CrudeLiftSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (CrudeLiftSystemType) {
    return CrudeLiftSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(CrudeLiftSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _createAndAnchorCrudeLift_CreateAndAnchorDeployableParams_uint256_uint256 {
  function createAndAnchorCrudeLift(
    CreateAndAnchorDeployableParams memory params,
    uint256 storageCapacity,
    uint256 ephemeralStorageCapacity
  ) external;
}

interface _insertLens_uint256 {
  function insertLens(uint256 crudeLiftId) external;
}

interface _startMining_uint256_uint256_uint256 {
  function startMining(uint256 crudeLiftId, uint256 riftId, uint256 miningRate) external;
}

interface _stopMining_uint256 {
  function stopMining(uint256 crudeLiftId) external;
}

interface _removeLens_uint256_address {
  function removeLens(uint256 smartObjectId, address receiver) external;
}

interface _addCrude_uint256_uint256 {
  function addCrude(uint256 smartObjectId, uint256 amount) external;
}

interface _removeCrude_uint256_uint256 {
  function removeCrude(uint256 smartObjectId, uint256 amount) external;
}

interface _clearCrude_uint256 {
  function clearCrude(uint256 smartObjectId) external;
}

interface _getCrudeAmount_uint256 {
  function getCrudeAmount(uint256 smartObjectId) external;
}

interface _getCrudeLiftClassId {
  function getCrudeLiftClassId() external;
}

using CrudeLiftSystemLib for CrudeLiftSystemType global;
using CrudeLiftSystemLib for CallWrapper global;
using CrudeLiftSystemLib for RootCallWrapper global;
