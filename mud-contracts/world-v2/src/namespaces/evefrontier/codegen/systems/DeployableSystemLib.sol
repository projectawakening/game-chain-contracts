// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { DeployableSystem } from "../../systems/deployable/DeployableSystem.sol";
import { State, CreateAndAnchorDeployableParams, SmartObjectData } from "../../systems/deployable/types.sol";
import { LocationData } from "../index.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type DeployableSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "evefrontier", name: "DeployableSystem" }))
DeployableSystemType constant deployableSystem = DeployableSystemType.wrap(
  0x737965766566726f6e746965720000004465706c6f7961626c6553797374656d
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title DeployableSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library DeployableSystemLib {
  error DeployableSystemLib_CallingFromRootSystem();
  error Deployable_IncorrectState(uint256 smartObjectId, State currentState);
  error Deployable_NoFuel(uint256 smartObjectId);
  error Deployable_StateTransitionPaused();
  error Deployable_TooMuchFuelDeposited(uint256 smartObjectId, uint256 amountDeposited);
  error DeployableERC721AlreadyInitialized();
  error Deployable_InvalidFuelConsumptionInterval(uint256 smartObjectId);
  error Deployable_InvalidObjectOwner(string message, address smartObjectOwner, uint256 smartObjectId);

  function createAndAnchorDeployable(
    DeployableSystemType self,
    CreateAndAnchorDeployableParams memory params
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).createAndAnchorDeployable(params);
  }

  function registerDeployableToken(DeployableSystemType self, address erc721Address) internal {
    return CallWrapper(self.toResourceId(), address(0)).registerDeployableToken(erc721Address);
  }

  function registerDeployable(
    DeployableSystemType self,
    uint256 smartObjectId,
    SmartObjectData memory smartObjectData,
    uint256 fuelUnitVolume,
    uint256 fuelConsumptionIntervalInSeconds,
    uint256 fuelMaxCapacity
  ) internal {
    return
      CallWrapper(self.toResourceId(), address(0)).registerDeployable(
        smartObjectId,
        smartObjectData,
        fuelUnitVolume,
        fuelConsumptionIntervalInSeconds,
        fuelMaxCapacity
      );
  }

  function destroyDeployable(DeployableSystemType self, uint256 smartObjectId) internal {
    return CallWrapper(self.toResourceId(), address(0)).destroyDeployable(smartObjectId);
  }

  function bringOnline(DeployableSystemType self, uint256 smartObjectId) internal {
    return CallWrapper(self.toResourceId(), address(0)).bringOnline(smartObjectId);
  }

  function bringOffline(DeployableSystemType self, uint256 smartObjectId) internal {
    return CallWrapper(self.toResourceId(), address(0)).bringOffline(smartObjectId);
  }

  function anchor(DeployableSystemType self, uint256 smartObjectId, LocationData memory locationData) internal {
    return CallWrapper(self.toResourceId(), address(0)).anchor(smartObjectId, locationData);
  }

  function unanchor(DeployableSystemType self, uint256 smartObjectId) internal {
    return CallWrapper(self.toResourceId(), address(0)).unanchor(smartObjectId);
  }

  function globalPause(DeployableSystemType self) internal {
    return CallWrapper(self.toResourceId(), address(0)).globalPause();
  }

  function globalResume(DeployableSystemType self) internal {
    return CallWrapper(self.toResourceId(), address(0)).globalResume();
  }

  function createAndAnchorDeployable(CallWrapper memory self, CreateAndAnchorDeployableParams memory params) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DeployableSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _createAndAnchorDeployable_CreateAndAnchorDeployableParams.createAndAnchorDeployable,
      (params)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function registerDeployableToken(CallWrapper memory self, address erc721Address) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DeployableSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_registerDeployableToken_address.registerDeployableToken, (erc721Address));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function registerDeployable(
    CallWrapper memory self,
    uint256 smartObjectId,
    SmartObjectData memory smartObjectData,
    uint256 fuelUnitVolume,
    uint256 fuelConsumptionIntervalInSeconds,
    uint256 fuelMaxCapacity
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DeployableSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _registerDeployable_uint256_SmartObjectData_uint256_uint256_uint256.registerDeployable,
      (smartObjectId, smartObjectData, fuelUnitVolume, fuelConsumptionIntervalInSeconds, fuelMaxCapacity)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function destroyDeployable(CallWrapper memory self, uint256 smartObjectId) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DeployableSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_destroyDeployable_uint256.destroyDeployable, (smartObjectId));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function bringOnline(CallWrapper memory self, uint256 smartObjectId) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DeployableSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_bringOnline_uint256.bringOnline, (smartObjectId));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function bringOffline(CallWrapper memory self, uint256 smartObjectId) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DeployableSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_bringOffline_uint256.bringOffline, (smartObjectId));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function anchor(CallWrapper memory self, uint256 smartObjectId, LocationData memory locationData) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DeployableSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_anchor_uint256_LocationData.anchor, (smartObjectId, locationData));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function unanchor(CallWrapper memory self, uint256 smartObjectId) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DeployableSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_unanchor_uint256.unanchor, (smartObjectId));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function globalPause(CallWrapper memory self) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DeployableSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_globalPause.globalPause, ());
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function globalResume(CallWrapper memory self) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DeployableSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_globalResume.globalResume, ());
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function createAndAnchorDeployable(
    RootCallWrapper memory self,
    CreateAndAnchorDeployableParams memory params
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _createAndAnchorDeployable_CreateAndAnchorDeployableParams.createAndAnchorDeployable,
      (params)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function registerDeployableToken(RootCallWrapper memory self, address erc721Address) internal {
    bytes memory systemCall = abi.encodeCall(_registerDeployableToken_address.registerDeployableToken, (erc721Address));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function registerDeployable(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    SmartObjectData memory smartObjectData,
    uint256 fuelUnitVolume,
    uint256 fuelConsumptionIntervalInSeconds,
    uint256 fuelMaxCapacity
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _registerDeployable_uint256_SmartObjectData_uint256_uint256_uint256.registerDeployable,
      (smartObjectId, smartObjectData, fuelUnitVolume, fuelConsumptionIntervalInSeconds, fuelMaxCapacity)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function destroyDeployable(RootCallWrapper memory self, uint256 smartObjectId) internal {
    bytes memory systemCall = abi.encodeCall(_destroyDeployable_uint256.destroyDeployable, (smartObjectId));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function bringOnline(RootCallWrapper memory self, uint256 smartObjectId) internal {
    bytes memory systemCall = abi.encodeCall(_bringOnline_uint256.bringOnline, (smartObjectId));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function bringOffline(RootCallWrapper memory self, uint256 smartObjectId) internal {
    bytes memory systemCall = abi.encodeCall(_bringOffline_uint256.bringOffline, (smartObjectId));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function anchor(RootCallWrapper memory self, uint256 smartObjectId, LocationData memory locationData) internal {
    bytes memory systemCall = abi.encodeCall(_anchor_uint256_LocationData.anchor, (smartObjectId, locationData));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function unanchor(RootCallWrapper memory self, uint256 smartObjectId) internal {
    bytes memory systemCall = abi.encodeCall(_unanchor_uint256.unanchor, (smartObjectId));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function globalPause(RootCallWrapper memory self) internal {
    bytes memory systemCall = abi.encodeCall(_globalPause.globalPause, ());
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function globalResume(RootCallWrapper memory self) internal {
    bytes memory systemCall = abi.encodeCall(_globalResume.globalResume, ());
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(DeployableSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(DeployableSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), msg.sender);
  }

  function callAsRootFrom(DeployableSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(DeployableSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(DeployableSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (DeployableSystemType) {
    return DeployableSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(DeployableSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _createAndAnchorDeployable_CreateAndAnchorDeployableParams {
  function createAndAnchorDeployable(CreateAndAnchorDeployableParams memory params) external;
}

interface _registerDeployableToken_address {
  function registerDeployableToken(address erc721Address) external;
}

interface _registerDeployable_uint256_SmartObjectData_uint256_uint256_uint256 {
  function registerDeployable(
    uint256 smartObjectId,
    SmartObjectData memory smartObjectData,
    uint256 fuelUnitVolume,
    uint256 fuelConsumptionIntervalInSeconds,
    uint256 fuelMaxCapacity
  ) external;
}

interface _destroyDeployable_uint256 {
  function destroyDeployable(uint256 smartObjectId) external;
}

interface _bringOnline_uint256 {
  function bringOnline(uint256 smartObjectId) external;
}

interface _bringOffline_uint256 {
  function bringOffline(uint256 smartObjectId) external;
}

interface _anchor_uint256_LocationData {
  function anchor(uint256 smartObjectId, LocationData memory locationData) external;
}

interface _unanchor_uint256 {
  function unanchor(uint256 smartObjectId) external;
}

interface _globalPause {
  function globalPause() external;
}

interface _globalResume {
  function globalResume() external;
}

using DeployableSystemLib for DeployableSystemType global;
using DeployableSystemLib for CallWrapper global;
using DeployableSystemLib for RootCallWrapper global;
