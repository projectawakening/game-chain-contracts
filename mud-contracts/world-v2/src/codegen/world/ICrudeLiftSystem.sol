// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { State, CreateAndAnchorDeployableParams } from "../../namespaces/evefrontier/systems/deployable/types.sol";

/**
 * @title ICrudeLiftSystem
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This interface is automatically generated from the corresponding system contract. Do not edit manually.
 */
interface ICrudeLiftSystem {
  error LensNotInserted();
  error LensExhausted();
  error LensAlreadyInserted();
  error LensExpired();
  error CannotRemoveLensWhileMining();
  error AlreadyMining();
  error NotMining();
  error RiftNotFoundOrDepleted();
  error InsufficientCrude();
  error RiftCollapsed();
  error CrudeLiftWrongState(uint256 crudeLiftId, State currentState);

  function evefrontier__createAndAnchorCrudeLift(
    CreateAndAnchorDeployableParams memory params,
    uint256 storageCapacity,
    uint256 ephemeralStorageCapacity
  ) external;

  function evefrontier__insertLens(uint256 crudeLiftId) external;

  function evefrontier__startMining(uint256 crudeLiftId, uint256 riftId, uint256 miningRate) external;

  function evefrontier__stopMining(uint256 crudeLiftId) external;

  function evefrontier__removeLens(uint256 smartObjectId, address receiver) external;

  function evefrontier__addCrude(uint256 smartObjectId, uint256 amount) external;

  function evefrontier__removeCrude(uint256 smartObjectId, uint256 amount) external;

  function evefrontier__clearCrude(uint256 smartObjectId) external;

  function evefrontier__getCrudeAmount(uint256 smartObjectId) external view returns (uint256);

  function evefrontier__getCrudeLiftClassId() external pure returns (uint256);
}
