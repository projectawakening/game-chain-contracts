// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { SOFAccessSystem } from "../../systems/sof-access-system/SOFAccessSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type SOFAccessSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "sofaccess", name: "SOFAccessSystem" }))
SOFAccessSystemType constant sOFAccessSystem = SOFAccessSystemType.wrap(
  0x7379736f666163636573730000000000534f4641636365737353797374656d00
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title SOFAccessSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library SOFAccessSystemLib {
  error SOFAccessSystemLib_CallingFromRootSystem();

  function allowDirectAccessRoleOnly(
    SOFAccessSystemType self,
    uint256 entityId,
    bytes memory targetCallData
  ) internal view {
    return CallWrapper(self.toResourceId(), address(0)).allowDirectAccessRoleOnly(entityId, targetCallData);
  }

  function allowDirectClassAccessRoleOnly(
    SOFAccessSystemType self,
    uint256 entityId,
    bytes memory targetCallData
  ) internal view {
    return CallWrapper(self.toResourceId(), address(0)).allowDirectClassAccessRoleOnly(entityId, targetCallData);
  }

  function allowClassScopedSystemOnly(
    SOFAccessSystemType self,
    uint256 entityId,
    bytes memory targetCallData
  ) internal view {
    return CallWrapper(self.toResourceId(), address(0)).allowClassScopedSystemOnly(entityId, targetCallData);
  }

  function allowClassScopedSystemOrDirectAccessRole(
    SOFAccessSystemType self,
    uint256 entityId,
    bytes memory targetCallData
  ) internal view {
    return
      CallWrapper(self.toResourceId(), address(0)).allowClassScopedSystemOrDirectAccessRole(entityId, targetCallData);
  }

  function allowClassScopedSystemOrDirectClassAccessRole(
    SOFAccessSystemType self,
    uint256 entityId,
    bytes memory targetCallData
  ) internal view {
    return
      CallWrapper(self.toResourceId(), address(0)).allowClassScopedSystemOrDirectClassAccessRole(
        entityId,
        targetCallData
      );
  }

  function allowCallAccessOnly(SOFAccessSystemType self, uint256 entityId, bytes memory targetCallData) internal view {
    return CallWrapper(self.toResourceId(), address(0)).allowCallAccessOnly(entityId, targetCallData);
  }

  function allowCallAccessOrDirectAccessRole(
    SOFAccessSystemType self,
    uint256 entityId,
    bytes memory targetCallData
  ) internal view {
    return CallWrapper(self.toResourceId(), address(0)).allowCallAccessOrDirectAccessRole(entityId, targetCallData);
  }

  function allowCallAccessOrClassScopedSystem(
    SOFAccessSystemType self,
    uint256 entityId,
    bytes memory targetCallData
  ) internal view {
    return CallWrapper(self.toResourceId(), address(0)).allowCallAccessOrClassScopedSystem(entityId, targetCallData);
  }

  function allowCallAccessOrClassScopedSystemOrDirectAccessRole(
    SOFAccessSystemType self,
    uint256 entityId,
    bytes memory targetCallData
  ) internal view {
    return
      CallWrapper(self.toResourceId(), address(0)).allowCallAccessOrClassScopedSystemOrDirectAccessRole(
        entityId,
        targetCallData
      );
  }

  function allowCallAccessOrClassScopedSystemOrDirectClassAccessRole(
    SOFAccessSystemType self,
    uint256 entityId,
    bytes memory targetCallData
  ) internal view {
    return
      CallWrapper(self.toResourceId(), address(0)).allowCallAccessOrClassScopedSystemOrDirectClassAccessRole(
        entityId,
        targetCallData
      );
  }

  function allowDirectAccessRoleOnly(
    CallWrapper memory self,
    uint256 entityId,
    bytes memory targetCallData
  ) internal view {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert SOFAccessSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _allowDirectAccessRoleOnly_uint256_bytes.allowDirectAccessRoleOnly,
      (entityId, targetCallData)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);
    abi.decode(returnData, (bytes));
  }

  function allowDirectClassAccessRoleOnly(
    CallWrapper memory self,
    uint256 entityId,
    bytes memory targetCallData
  ) internal view {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert SOFAccessSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _allowDirectClassAccessRoleOnly_uint256_bytes.allowDirectClassAccessRoleOnly,
      (entityId, targetCallData)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);
    abi.decode(returnData, (bytes));
  }

  function allowClassScopedSystemOnly(
    CallWrapper memory self,
    uint256 entityId,
    bytes memory targetCallData
  ) internal view {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert SOFAccessSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _allowClassScopedSystemOnly_uint256_bytes.allowClassScopedSystemOnly,
      (entityId, targetCallData)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);
    abi.decode(returnData, (bytes));
  }

  function allowClassScopedSystemOrDirectAccessRole(
    CallWrapper memory self,
    uint256 entityId,
    bytes memory targetCallData
  ) internal view {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert SOFAccessSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _allowClassScopedSystemOrDirectAccessRole_uint256_bytes.allowClassScopedSystemOrDirectAccessRole,
      (entityId, targetCallData)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);
    abi.decode(returnData, (bytes));
  }

  function allowClassScopedSystemOrDirectClassAccessRole(
    CallWrapper memory self,
    uint256 entityId,
    bytes memory targetCallData
  ) internal view {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert SOFAccessSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _allowClassScopedSystemOrDirectClassAccessRole_uint256_bytes.allowClassScopedSystemOrDirectClassAccessRole,
      (entityId, targetCallData)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);
    abi.decode(returnData, (bytes));
  }

  function allowCallAccessOnly(CallWrapper memory self, uint256 entityId, bytes memory targetCallData) internal view {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert SOFAccessSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _allowCallAccessOnly_uint256_bytes.allowCallAccessOnly,
      (entityId, targetCallData)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);
    abi.decode(returnData, (bytes));
  }

  function allowCallAccessOrDirectAccessRole(
    CallWrapper memory self,
    uint256 entityId,
    bytes memory targetCallData
  ) internal view {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert SOFAccessSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _allowCallAccessOrDirectAccessRole_uint256_bytes.allowCallAccessOrDirectAccessRole,
      (entityId, targetCallData)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);
    abi.decode(returnData, (bytes));
  }

  function allowCallAccessOrClassScopedSystem(
    CallWrapper memory self,
    uint256 entityId,
    bytes memory targetCallData
  ) internal view {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert SOFAccessSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _allowCallAccessOrClassScopedSystem_uint256_bytes.allowCallAccessOrClassScopedSystem,
      (entityId, targetCallData)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);
    abi.decode(returnData, (bytes));
  }

  function allowCallAccessOrClassScopedSystemOrDirectAccessRole(
    CallWrapper memory self,
    uint256 entityId,
    bytes memory targetCallData
  ) internal view {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert SOFAccessSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _allowCallAccessOrClassScopedSystemOrDirectAccessRole_uint256_bytes
        .allowCallAccessOrClassScopedSystemOrDirectAccessRole,
      (entityId, targetCallData)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);
    abi.decode(returnData, (bytes));
  }

  function allowCallAccessOrClassScopedSystemOrDirectClassAccessRole(
    CallWrapper memory self,
    uint256 entityId,
    bytes memory targetCallData
  ) internal view {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert SOFAccessSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _allowCallAccessOrClassScopedSystemOrDirectClassAccessRole_uint256_bytes
        .allowCallAccessOrClassScopedSystemOrDirectClassAccessRole,
      (entityId, targetCallData)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);
    abi.decode(returnData, (bytes));
  }

  function allowDirectAccessRoleOnly(
    RootCallWrapper memory self,
    uint256 entityId,
    bytes memory targetCallData
  ) internal view {
    bytes memory systemCall = abi.encodeCall(
      _allowDirectAccessRoleOnly_uint256_bytes.allowDirectAccessRoleOnly,
      (entityId, targetCallData)
    );
    SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
  }

  function allowDirectClassAccessRoleOnly(
    RootCallWrapper memory self,
    uint256 entityId,
    bytes memory targetCallData
  ) internal view {
    bytes memory systemCall = abi.encodeCall(
      _allowDirectClassAccessRoleOnly_uint256_bytes.allowDirectClassAccessRoleOnly,
      (entityId, targetCallData)
    );
    SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
  }

  function allowClassScopedSystemOnly(
    RootCallWrapper memory self,
    uint256 entityId,
    bytes memory targetCallData
  ) internal view {
    bytes memory systemCall = abi.encodeCall(
      _allowClassScopedSystemOnly_uint256_bytes.allowClassScopedSystemOnly,
      (entityId, targetCallData)
    );
    SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
  }

  function allowClassScopedSystemOrDirectAccessRole(
    RootCallWrapper memory self,
    uint256 entityId,
    bytes memory targetCallData
  ) internal view {
    bytes memory systemCall = abi.encodeCall(
      _allowClassScopedSystemOrDirectAccessRole_uint256_bytes.allowClassScopedSystemOrDirectAccessRole,
      (entityId, targetCallData)
    );
    SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
  }

  function allowClassScopedSystemOrDirectClassAccessRole(
    RootCallWrapper memory self,
    uint256 entityId,
    bytes memory targetCallData
  ) internal view {
    bytes memory systemCall = abi.encodeCall(
      _allowClassScopedSystemOrDirectClassAccessRole_uint256_bytes.allowClassScopedSystemOrDirectClassAccessRole,
      (entityId, targetCallData)
    );
    SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
  }

  function allowCallAccessOnly(
    RootCallWrapper memory self,
    uint256 entityId,
    bytes memory targetCallData
  ) internal view {
    bytes memory systemCall = abi.encodeCall(
      _allowCallAccessOnly_uint256_bytes.allowCallAccessOnly,
      (entityId, targetCallData)
    );
    SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
  }

  function allowCallAccessOrDirectAccessRole(
    RootCallWrapper memory self,
    uint256 entityId,
    bytes memory targetCallData
  ) internal view {
    bytes memory systemCall = abi.encodeCall(
      _allowCallAccessOrDirectAccessRole_uint256_bytes.allowCallAccessOrDirectAccessRole,
      (entityId, targetCallData)
    );
    SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
  }

  function allowCallAccessOrClassScopedSystem(
    RootCallWrapper memory self,
    uint256 entityId,
    bytes memory targetCallData
  ) internal view {
    bytes memory systemCall = abi.encodeCall(
      _allowCallAccessOrClassScopedSystem_uint256_bytes.allowCallAccessOrClassScopedSystem,
      (entityId, targetCallData)
    );
    SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
  }

  function allowCallAccessOrClassScopedSystemOrDirectAccessRole(
    RootCallWrapper memory self,
    uint256 entityId,
    bytes memory targetCallData
  ) internal view {
    bytes memory systemCall = abi.encodeCall(
      _allowCallAccessOrClassScopedSystemOrDirectAccessRole_uint256_bytes
        .allowCallAccessOrClassScopedSystemOrDirectAccessRole,
      (entityId, targetCallData)
    );
    SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
  }

  function allowCallAccessOrClassScopedSystemOrDirectClassAccessRole(
    RootCallWrapper memory self,
    uint256 entityId,
    bytes memory targetCallData
  ) internal view {
    bytes memory systemCall = abi.encodeCall(
      _allowCallAccessOrClassScopedSystemOrDirectClassAccessRole_uint256_bytes
        .allowCallAccessOrClassScopedSystemOrDirectClassAccessRole,
      (entityId, targetCallData)
    );
    SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
  }

  function callFrom(SOFAccessSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(SOFAccessSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), msg.sender);
  }

  function callAsRootFrom(SOFAccessSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(SOFAccessSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(SOFAccessSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (SOFAccessSystemType) {
    return SOFAccessSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(SOFAccessSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _allowDirectAccessRoleOnly_uint256_bytes {
  function allowDirectAccessRoleOnly(uint256 entityId, bytes memory targetCallData) external;
}

interface _allowDirectClassAccessRoleOnly_uint256_bytes {
  function allowDirectClassAccessRoleOnly(uint256 entityId, bytes memory targetCallData) external;
}

interface _allowClassScopedSystemOnly_uint256_bytes {
  function allowClassScopedSystemOnly(uint256 entityId, bytes memory targetCallData) external;
}

interface _allowClassScopedSystemOrDirectAccessRole_uint256_bytes {
  function allowClassScopedSystemOrDirectAccessRole(uint256 entityId, bytes memory targetCallData) external;
}

interface _allowClassScopedSystemOrDirectClassAccessRole_uint256_bytes {
  function allowClassScopedSystemOrDirectClassAccessRole(uint256 entityId, bytes memory targetCallData) external;
}

interface _allowCallAccessOnly_uint256_bytes {
  function allowCallAccessOnly(uint256 entityId, bytes memory targetCallData) external;
}

interface _allowCallAccessOrDirectAccessRole_uint256_bytes {
  function allowCallAccessOrDirectAccessRole(uint256 entityId, bytes memory targetCallData) external;
}

interface _allowCallAccessOrClassScopedSystem_uint256_bytes {
  function allowCallAccessOrClassScopedSystem(uint256 entityId, bytes memory targetCallData) external;
}

interface _allowCallAccessOrClassScopedSystemOrDirectAccessRole_uint256_bytes {
  function allowCallAccessOrClassScopedSystemOrDirectAccessRole(uint256 entityId, bytes memory targetCallData) external;
}

interface _allowCallAccessOrClassScopedSystemOrDirectClassAccessRole_uint256_bytes {
  function allowCallAccessOrClassScopedSystemOrDirectClassAccessRole(
    uint256 entityId,
    bytes memory targetCallData
  ) external;
}

using SOFAccessSystemLib for SOFAccessSystemType global;
using SOFAccessSystemLib for CallWrapper global;
using SOFAccessSystemLib for RootCallWrapper global;
