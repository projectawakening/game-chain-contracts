// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { RoleManagementSystem } from "../../systems/role-management-system/RoleManagementSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type RoleManagementSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "evefrontier", name: "RoleManagementSy" }))
RoleManagementSystemType constant roleManagementSystem = RoleManagementSystemType.wrap(
  0x737965766566726f6e74696572000000526f6c654d616e6167656d656e745379
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title RoleManagementSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library RoleManagementSystemLib {
  error RoleManagementSystemLib_CallingFromRootSystem();

  function createRole(RoleManagementSystemType self, bytes32 role, bytes32 admin) internal {
    return CallWrapper(self.toResourceId(), address(0)).createRole(role, admin);
  }

  function transferRoleAdmin(RoleManagementSystemType self, bytes32 role, bytes32 newAdmin) internal {
    return CallWrapper(self.toResourceId(), address(0)).transferRoleAdmin(role, newAdmin);
  }

  function grantRole(RoleManagementSystemType self, bytes32 role, address account) internal {
    return CallWrapper(self.toResourceId(), address(0)).grantRole(role, account);
  }

  function revokeRole(RoleManagementSystemType self, bytes32 role, address account) internal {
    return CallWrapper(self.toResourceId(), address(0)).revokeRole(role, account);
  }

  function renounceRole(RoleManagementSystemType self, bytes32 role, address callerConfirmation) internal {
    return CallWrapper(self.toResourceId(), address(0)).renounceRole(role, callerConfirmation);
  }

  function revokeAll(RoleManagementSystemType self, bytes32 role) internal {
    return CallWrapper(self.toResourceId(), address(0)).revokeAll(role);
  }

  function scopedCreateRole(
    RoleManagementSystemType self,
    uint256 entityId,
    bytes32 role,
    bytes32 admin,
    address roleMember
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).scopedCreateRole(entityId, role, admin, roleMember);
  }

  function scopedTransferRoleAdmin(
    RoleManagementSystemType self,
    uint256 entityId,
    bytes32 role,
    bytes32 newAdmin
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).scopedTransferRoleAdmin(entityId, role, newAdmin);
  }

  function scopedGrantRole(RoleManagementSystemType self, uint256 entityId, bytes32 role, address account) internal {
    return CallWrapper(self.toResourceId(), address(0)).scopedGrantRole(entityId, role, account);
  }

  function scopedRevokeRole(RoleManagementSystemType self, uint256 entityId, bytes32 role, address account) internal {
    return CallWrapper(self.toResourceId(), address(0)).scopedRevokeRole(entityId, role, account);
  }

  function scopedRenounceRole(
    RoleManagementSystemType self,
    uint256 entityId,
    bytes32 role,
    address callerConfirmation
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).scopedRenounceRole(entityId, role, callerConfirmation);
  }

  function scopedRevokeAll(RoleManagementSystemType self, uint256 entityId, bytes32 role) internal {
    return CallWrapper(self.toResourceId(), address(0)).scopedRevokeAll(entityId, role);
  }

  function createRole(CallWrapper memory self, bytes32 role, bytes32 admin) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert RoleManagementSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_createRole_bytes32_bytes32.createRole, (role, admin));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function transferRoleAdmin(CallWrapper memory self, bytes32 role, bytes32 newAdmin) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert RoleManagementSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_transferRoleAdmin_bytes32_bytes32.transferRoleAdmin, (role, newAdmin));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function grantRole(CallWrapper memory self, bytes32 role, address account) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert RoleManagementSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_grantRole_bytes32_address.grantRole, (role, account));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function revokeRole(CallWrapper memory self, bytes32 role, address account) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert RoleManagementSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_revokeRole_bytes32_address.revokeRole, (role, account));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function renounceRole(CallWrapper memory self, bytes32 role, address callerConfirmation) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert RoleManagementSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_renounceRole_bytes32_address.renounceRole, (role, callerConfirmation));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function revokeAll(CallWrapper memory self, bytes32 role) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert RoleManagementSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_revokeAll_bytes32.revokeAll, (role));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function scopedCreateRole(
    CallWrapper memory self,
    uint256 entityId,
    bytes32 role,
    bytes32 admin,
    address roleMember
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert RoleManagementSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _scopedCreateRole_uint256_bytes32_bytes32_address.scopedCreateRole,
      (entityId, role, admin, roleMember)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function scopedTransferRoleAdmin(CallWrapper memory self, uint256 entityId, bytes32 role, bytes32 newAdmin) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert RoleManagementSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _scopedTransferRoleAdmin_uint256_bytes32_bytes32.scopedTransferRoleAdmin,
      (entityId, role, newAdmin)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function scopedGrantRole(CallWrapper memory self, uint256 entityId, bytes32 role, address account) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert RoleManagementSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _scopedGrantRole_uint256_bytes32_address.scopedGrantRole,
      (entityId, role, account)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function scopedRevokeRole(CallWrapper memory self, uint256 entityId, bytes32 role, address account) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert RoleManagementSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _scopedRevokeRole_uint256_bytes32_address.scopedRevokeRole,
      (entityId, role, account)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function scopedRenounceRole(
    CallWrapper memory self,
    uint256 entityId,
    bytes32 role,
    address callerConfirmation
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert RoleManagementSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _scopedRenounceRole_uint256_bytes32_address.scopedRenounceRole,
      (entityId, role, callerConfirmation)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function scopedRevokeAll(CallWrapper memory self, uint256 entityId, bytes32 role) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert RoleManagementSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_scopedRevokeAll_uint256_bytes32.scopedRevokeAll, (entityId, role));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function createRole(RootCallWrapper memory self, bytes32 role, bytes32 admin) internal {
    bytes memory systemCall = abi.encodeCall(_createRole_bytes32_bytes32.createRole, (role, admin));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function transferRoleAdmin(RootCallWrapper memory self, bytes32 role, bytes32 newAdmin) internal {
    bytes memory systemCall = abi.encodeCall(_transferRoleAdmin_bytes32_bytes32.transferRoleAdmin, (role, newAdmin));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function grantRole(RootCallWrapper memory self, bytes32 role, address account) internal {
    bytes memory systemCall = abi.encodeCall(_grantRole_bytes32_address.grantRole, (role, account));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function revokeRole(RootCallWrapper memory self, bytes32 role, address account) internal {
    bytes memory systemCall = abi.encodeCall(_revokeRole_bytes32_address.revokeRole, (role, account));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function renounceRole(RootCallWrapper memory self, bytes32 role, address callerConfirmation) internal {
    bytes memory systemCall = abi.encodeCall(_renounceRole_bytes32_address.renounceRole, (role, callerConfirmation));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function revokeAll(RootCallWrapper memory self, bytes32 role) internal {
    bytes memory systemCall = abi.encodeCall(_revokeAll_bytes32.revokeAll, (role));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function scopedCreateRole(
    RootCallWrapper memory self,
    uint256 entityId,
    bytes32 role,
    bytes32 admin,
    address roleMember
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _scopedCreateRole_uint256_bytes32_bytes32_address.scopedCreateRole,
      (entityId, role, admin, roleMember)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function scopedTransferRoleAdmin(
    RootCallWrapper memory self,
    uint256 entityId,
    bytes32 role,
    bytes32 newAdmin
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _scopedTransferRoleAdmin_uint256_bytes32_bytes32.scopedTransferRoleAdmin,
      (entityId, role, newAdmin)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function scopedGrantRole(RootCallWrapper memory self, uint256 entityId, bytes32 role, address account) internal {
    bytes memory systemCall = abi.encodeCall(
      _scopedGrantRole_uint256_bytes32_address.scopedGrantRole,
      (entityId, role, account)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function scopedRevokeRole(RootCallWrapper memory self, uint256 entityId, bytes32 role, address account) internal {
    bytes memory systemCall = abi.encodeCall(
      _scopedRevokeRole_uint256_bytes32_address.scopedRevokeRole,
      (entityId, role, account)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function scopedRenounceRole(
    RootCallWrapper memory self,
    uint256 entityId,
    bytes32 role,
    address callerConfirmation
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _scopedRenounceRole_uint256_bytes32_address.scopedRenounceRole,
      (entityId, role, callerConfirmation)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function scopedRevokeAll(RootCallWrapper memory self, uint256 entityId, bytes32 role) internal {
    bytes memory systemCall = abi.encodeCall(_scopedRevokeAll_uint256_bytes32.scopedRevokeAll, (entityId, role));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(RoleManagementSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(RoleManagementSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), msg.sender);
  }

  function callAsRootFrom(RoleManagementSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(RoleManagementSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(RoleManagementSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (RoleManagementSystemType) {
    return RoleManagementSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(RoleManagementSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _createRole_bytes32_bytes32 {
  function createRole(bytes32 role, bytes32 admin) external;
}

interface _transferRoleAdmin_bytes32_bytes32 {
  function transferRoleAdmin(bytes32 role, bytes32 newAdmin) external;
}

interface _grantRole_bytes32_address {
  function grantRole(bytes32 role, address account) external;
}

interface _revokeRole_bytes32_address {
  function revokeRole(bytes32 role, address account) external;
}

interface _renounceRole_bytes32_address {
  function renounceRole(bytes32 role, address callerConfirmation) external;
}

interface _revokeAll_bytes32 {
  function revokeAll(bytes32 role) external;
}

interface _scopedCreateRole_uint256_bytes32_bytes32_address {
  function scopedCreateRole(uint256 entityId, bytes32 role, bytes32 admin, address roleMember) external;
}

interface _scopedTransferRoleAdmin_uint256_bytes32_bytes32 {
  function scopedTransferRoleAdmin(uint256 entityId, bytes32 role, bytes32 newAdmin) external;
}

interface _scopedGrantRole_uint256_bytes32_address {
  function scopedGrantRole(uint256 entityId, bytes32 role, address account) external;
}

interface _scopedRevokeRole_uint256_bytes32_address {
  function scopedRevokeRole(uint256 entityId, bytes32 role, address account) external;
}

interface _scopedRenounceRole_uint256_bytes32_address {
  function scopedRenounceRole(uint256 entityId, bytes32 role, address callerConfirmation) external;
}

interface _scopedRevokeAll_uint256_bytes32 {
  function scopedRevokeAll(uint256 entityId, bytes32 role) external;
}

using RoleManagementSystemLib for RoleManagementSystemType global;
using RoleManagementSystemLib for CallWrapper global;
using RoleManagementSystemLib for RootCallWrapper global;
