// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { TagSystem } from "../../systems/tag-system/TagSystem.sol";
import { TagParams } from "../../systems/tag-system/types.sol";
import { TagId } from "../../../../libs/TagId.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type TagSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "evefrontier", name: "TagSystem" }))
TagSystemType constant tagSystem = TagSystemType.wrap(
  0x737965766566726f6e7469657200000054616753797374656d00000000000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title TagSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library TagSystemLib {
  error TagSystemLib_CallingFromRootSystem();

  function setTag(TagSystemType self, uint256 entityId, TagParams memory tagParams) internal {
    return CallWrapper(self.toResourceId(), address(0)).setTag(entityId, tagParams);
  }

  function setTags(TagSystemType self, uint256 entityId, TagParams[] memory tagParams) internal {
    return CallWrapper(self.toResourceId(), address(0)).setTags(entityId, tagParams);
  }

  function removeTag(TagSystemType self, uint256 entityId, TagId tagId) internal {
    return CallWrapper(self.toResourceId(), address(0)).removeTag(entityId, tagId);
  }

  function removeTags(TagSystemType self, uint256 entityId, TagId[] memory tagIds) internal {
    return CallWrapper(self.toResourceId(), address(0)).removeTags(entityId, tagIds);
  }

  function setTag(CallWrapper memory self, uint256 entityId, TagParams memory tagParams) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert TagSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_setTag_uint256_TagParams.setTag, (entityId, tagParams));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function setTags(CallWrapper memory self, uint256 entityId, TagParams[] memory tagParams) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert TagSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_setTags_uint256_TagParamsArray.setTags, (entityId, tagParams));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function removeTag(CallWrapper memory self, uint256 entityId, TagId tagId) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert TagSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_removeTag_uint256_TagId.removeTag, (entityId, tagId));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function removeTags(CallWrapper memory self, uint256 entityId, TagId[] memory tagIds) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert TagSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_removeTags_uint256_TagIdArray.removeTags, (entityId, tagIds));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function setTag(RootCallWrapper memory self, uint256 entityId, TagParams memory tagParams) internal {
    bytes memory systemCall = abi.encodeCall(_setTag_uint256_TagParams.setTag, (entityId, tagParams));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function setTags(RootCallWrapper memory self, uint256 entityId, TagParams[] memory tagParams) internal {
    bytes memory systemCall = abi.encodeCall(_setTags_uint256_TagParamsArray.setTags, (entityId, tagParams));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function removeTag(RootCallWrapper memory self, uint256 entityId, TagId tagId) internal {
    bytes memory systemCall = abi.encodeCall(_removeTag_uint256_TagId.removeTag, (entityId, tagId));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function removeTags(RootCallWrapper memory self, uint256 entityId, TagId[] memory tagIds) internal {
    bytes memory systemCall = abi.encodeCall(_removeTags_uint256_TagIdArray.removeTags, (entityId, tagIds));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(TagSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(TagSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), msg.sender);
  }

  function callAsRootFrom(TagSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(TagSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(TagSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (TagSystemType) {
    return TagSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(TagSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _setTag_uint256_TagParams {
  function setTag(uint256 entityId, TagParams memory tagParams) external;
}

interface _setTags_uint256_TagParamsArray {
  function setTags(uint256 entityId, TagParams[] memory tagParams) external;
}

interface _removeTag_uint256_TagId {
  function removeTag(uint256 entityId, TagId tagId) external;
}

interface _removeTags_uint256_TagIdArray {
  function removeTags(uint256 entityId, TagId[] memory tagIds) external;
}

using TagSystemLib for TagSystemType global;
using TagSystemLib for CallWrapper global;
using TagSystemLib for RootCallWrapper global;
