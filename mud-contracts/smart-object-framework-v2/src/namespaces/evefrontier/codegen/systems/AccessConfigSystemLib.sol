// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { AccessConfigSystem } from "../../systems/access-config-system/AccessConfigSystem.sol";
import { ResourceId } from "@latticexyz/world/src/WorldResourceId.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type AccessConfigSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "evefrontier", name: "AccessConfigSyst" }))
AccessConfigSystemType constant accessConfigSystem = AccessConfigSystemType.wrap(
  0x737965766566726f6e74696572000000416363657373436f6e66696753797374
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title AccessConfigSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library AccessConfigSystemLib {
  error AccessConfigSystemLib_CallingFromRootSystem();

  function configureAccess(
    AccessConfigSystemType self,
    ResourceId targetSystemId,
    bytes4 targetFunctionId,
    ResourceId accessSystemId,
    bytes4 accessFunctionId
  ) internal {
    return
      CallWrapper(self.toResourceId(), address(0)).configureAccess(
        targetSystemId,
        targetFunctionId,
        accessSystemId,
        accessFunctionId
      );
  }

  function setAccessEnforcement(
    AccessConfigSystemType self,
    ResourceId targetSystemId,
    bytes4 targetFunctionId,
    bool enforced
  ) internal {
    return
      CallWrapper(self.toResourceId(), address(0)).setAccessEnforcement(targetSystemId, targetFunctionId, enforced);
  }

  function configureAccess(
    CallWrapper memory self,
    ResourceId targetSystemId,
    bytes4 targetFunctionId,
    ResourceId accessSystemId,
    bytes4 accessFunctionId
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert AccessConfigSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _configureAccess_ResourceId_bytes4_ResourceId_bytes4.configureAccess,
      (targetSystemId, targetFunctionId, accessSystemId, accessFunctionId)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function setAccessEnforcement(
    CallWrapper memory self,
    ResourceId targetSystemId,
    bytes4 targetFunctionId,
    bool enforced
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert AccessConfigSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _setAccessEnforcement_ResourceId_bytes4_bool.setAccessEnforcement,
      (targetSystemId, targetFunctionId, enforced)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function configureAccess(
    RootCallWrapper memory self,
    ResourceId targetSystemId,
    bytes4 targetFunctionId,
    ResourceId accessSystemId,
    bytes4 accessFunctionId
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _configureAccess_ResourceId_bytes4_ResourceId_bytes4.configureAccess,
      (targetSystemId, targetFunctionId, accessSystemId, accessFunctionId)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function setAccessEnforcement(
    RootCallWrapper memory self,
    ResourceId targetSystemId,
    bytes4 targetFunctionId,
    bool enforced
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _setAccessEnforcement_ResourceId_bytes4_bool.setAccessEnforcement,
      (targetSystemId, targetFunctionId, enforced)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(AccessConfigSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(AccessConfigSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), msg.sender);
  }

  function callAsRootFrom(AccessConfigSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(AccessConfigSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(AccessConfigSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (AccessConfigSystemType) {
    return AccessConfigSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(AccessConfigSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _configureAccess_ResourceId_bytes4_ResourceId_bytes4 {
  function configureAccess(
    ResourceId targetSystemId,
    bytes4 targetFunctionId,
    ResourceId accessSystemId,
    bytes4 accessFunctionId
  ) external;
}

interface _setAccessEnforcement_ResourceId_bytes4_bool {
  function setAccessEnforcement(ResourceId targetSystemId, bytes4 targetFunctionId, bool enforced) external;
}

using AccessConfigSystemLib for AccessConfigSystemType global;
using AccessConfigSystemLib for CallWrapper global;
using AccessConfigSystemLib for RootCallWrapper global;
