// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { InventoryItem } from "./types.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type EphemeralInventorySystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "evefrontier", name: "EphemeralInvento" }))
EphemeralInventorySystemType constant ephemeralInventorySystem = EphemeralInventorySystemType.wrap(
  0x737965766566726f6e74696572000000457068656d6572616c496e76656e746f
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title EphemeralInventorySystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library EphemeralInventorySystemLib {
  error EphemeralInventorySystemLib_CallingFromRootSystem();
  error InvalidEphemeralInventoryOwner(string message, address ephemeralInvOwner);
  error Ephemeral_Inventory_InsufficientCapacity(string message, uint256 maxCapacity, uint256 usedCapacity);
  error Ephemeral_Inventory_InvalidCapacity(string message);
  error Ephemeral_Inventory_InvalidItem(string message, uint256 inventoryItemId);
  error Ephemeral_Inventory_InvalidItemQuantity(string message, uint256 quantity, uint256 maxQuantity);

  function setEphemeralInventoryCapacity(
    EphemeralInventorySystemType self,
    uint256 smartObjectId,
    uint256 ephemeralStorageCapacity
  ) internal {
    return
      CallWrapper(self.toResourceId(), address(0)).setEphemeralInventoryCapacity(
        smartObjectId,
        ephemeralStorageCapacity
      );
  }

  function createAndDepositItemsToEphemeralInventory(
    EphemeralInventorySystemType self,
    uint256 smartObjectId,
    address ephemeralInventoryOwner,
    InventoryItem[] memory items
  ) internal {
    return
      CallWrapper(self.toResourceId(), address(0)).createAndDepositItemsToEphemeralInventory(
        smartObjectId,
        ephemeralInventoryOwner,
        items
      );
  }

  function depositToEphemeralInventory(
    EphemeralInventorySystemType self,
    uint256 smartObjectId,
    address ephemeralInventoryOwner,
    InventoryItem[] memory items
  ) internal {
    return
      CallWrapper(self.toResourceId(), address(0)).depositToEphemeralInventory(
        smartObjectId,
        ephemeralInventoryOwner,
        items
      );
  }

  function withdrawFromEphemeralInventory(
    EphemeralInventorySystemType self,
    uint256 smartObjectId,
    address ephemeralInventoryOwner,
    InventoryItem[] memory items
  ) internal {
    return
      CallWrapper(self.toResourceId(), address(0)).withdrawFromEphemeralInventory(
        smartObjectId,
        ephemeralInventoryOwner,
        items
      );
  }

  function setEphemeralInventoryCapacity(
    CallWrapper memory self,
    uint256 smartObjectId,
    uint256 ephemeralStorageCapacity
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert EphemeralInventorySystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _setEphemeralInventoryCapacity_uint256_uint256.setEphemeralInventoryCapacity,
      (smartObjectId, ephemeralStorageCapacity)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function createAndDepositItemsToEphemeralInventory(
    CallWrapper memory self,
    uint256 smartObjectId,
    address ephemeralInventoryOwner,
    InventoryItem[] memory items
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert EphemeralInventorySystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _createAndDepositItemsToEphemeralInventory_uint256_address_InventoryItemArray
        .createAndDepositItemsToEphemeralInventory,
      (smartObjectId, ephemeralInventoryOwner, items)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function depositToEphemeralInventory(
    CallWrapper memory self,
    uint256 smartObjectId,
    address ephemeralInventoryOwner,
    InventoryItem[] memory items
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert EphemeralInventorySystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _depositToEphemeralInventory_uint256_address_InventoryItemArray.depositToEphemeralInventory,
      (smartObjectId, ephemeralInventoryOwner, items)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function withdrawFromEphemeralInventory(
    CallWrapper memory self,
    uint256 smartObjectId,
    address ephemeralInventoryOwner,
    InventoryItem[] memory items
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert EphemeralInventorySystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _withdrawFromEphemeralInventory_uint256_address_InventoryItemArray.withdrawFromEphemeralInventory,
      (smartObjectId, ephemeralInventoryOwner, items)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function setEphemeralInventoryCapacity(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    uint256 ephemeralStorageCapacity
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _setEphemeralInventoryCapacity_uint256_uint256.setEphemeralInventoryCapacity,
      (smartObjectId, ephemeralStorageCapacity)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function createAndDepositItemsToEphemeralInventory(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    address ephemeralInventoryOwner,
    InventoryItem[] memory items
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _createAndDepositItemsToEphemeralInventory_uint256_address_InventoryItemArray
        .createAndDepositItemsToEphemeralInventory,
      (smartObjectId, ephemeralInventoryOwner, items)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function depositToEphemeralInventory(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    address ephemeralInventoryOwner,
    InventoryItem[] memory items
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _depositToEphemeralInventory_uint256_address_InventoryItemArray.depositToEphemeralInventory,
      (smartObjectId, ephemeralInventoryOwner, items)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function withdrawFromEphemeralInventory(
    RootCallWrapper memory self,
    uint256 smartObjectId,
    address ephemeralInventoryOwner,
    InventoryItem[] memory items
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _withdrawFromEphemeralInventory_uint256_address_InventoryItemArray.withdrawFromEphemeralInventory,
      (smartObjectId, ephemeralInventoryOwner, items)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(EphemeralInventorySystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(EphemeralInventorySystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), msg.sender);
  }

  function callAsRootFrom(
    EphemeralInventorySystemType self,
    address from
  ) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(EphemeralInventorySystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(EphemeralInventorySystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (EphemeralInventorySystemType) {
    return EphemeralInventorySystemType.wrap(resourceId.unwrap());
  }

  function getAddress(EphemeralInventorySystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _setEphemeralInventoryCapacity_uint256_uint256 {
  function setEphemeralInventoryCapacity(uint256 smartObjectId, uint256 ephemeralStorageCapacity) external;
}

interface _createAndDepositItemsToEphemeralInventory_uint256_address_InventoryItemArray {
  function createAndDepositItemsToEphemeralInventory(
    uint256 smartObjectId,
    address ephemeralInventoryOwner,
    InventoryItem[] memory items
  ) external;
}

interface _depositToEphemeralInventory_uint256_address_InventoryItemArray {
  function depositToEphemeralInventory(
    uint256 smartObjectId,
    address ephemeralInventoryOwner,
    InventoryItem[] memory items
  ) external;
}

interface _withdrawFromEphemeralInventory_uint256_address_InventoryItemArray {
  function withdrawFromEphemeralInventory(
    uint256 smartObjectId,
    address ephemeralInventoryOwner,
    InventoryItem[] memory items
  ) external;
}

using EphemeralInventorySystemLib for EphemeralInventorySystemType global;
using EphemeralInventorySystemLib for CallWrapper global;
using EphemeralInventorySystemLib for RootCallWrapper global;
